services:
  # Сервис базы данных PostgreSQL с pgvector
  db:
    image: pgvector/pgvector:pg17 # Используем образ с нужной версией Postgres и pgvector
    container_name: my_postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432" # Пробрасываем порт на хост для удобства подключения
    volumes:
      - postgres_data:/var/lib/postgresql/data # Сохраняем данные БД между перезапусками
    networks:
      - app-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  ml:
    build: ../compvis       # Dockerfile для Python здесь
    container_name: ml_service
    ports:
      - "8000:8000"
    networks:
      - app-net


  # Сервис вашего Go-приложения
  app:
    build: . # Собираем образ из Dockerfile в текущей директории
    container_name: my_go_server
    ports:
      - "${HTTP_PORT}:${HTTP_PORT}" # Пробрасываем порт из .env
    env_file:
      - .env # Подключаем все переменные из .env файла
    depends_on:
      db:
        condition: service_healthy # Запускаем только после того, как БД будет готова
    networks:
      - app-net
    restart: unless-stopped

# Определяем общую сеть
networks:
  app-net:
    driver: bridge

# Определяем том для персистентного хранения данных БД
volumes:
  postgres_data:
basePath: /api/v1
definitions:
  domain.CvScan:
    properties:
      createdAt:
        type: string
      debugImageUrl:
        type: string
      detectedTools:
        items:
          $ref: '#/definitions/domain.CvScanDetail'
        type: array
      id:
        format: int64
        type: integer
      imageUrl:
        type: string
      scanType:
        $ref: '#/definitions/domain.ScanType'
      transactionId:
        format: int64
        type: integer
      transactionObj:
        $ref: '#/definitions/domain.Transaction'
    type: object
  domain.CvScanDetail:
    properties:
      confidence:
        format: float32
        type: number
      cvScanId:
        format: int64
        type: integer
      detectedToolTypeId:
        format: int64
        type: integer
      embedding:
        items:
          format: float32
          type: number
        type: array
      id:
        format: int64
        type: integer
    type: object
  domain.Role:
    enum:
    - Engineer
    - Quality Auditor
    type: string
    x-enum-comments:
      Engineer: Авиатехник / Инженер
      QualityAuditor: Специалист службы качества / аудит
    x-enum-descriptions:
    - Авиатехник / Инженер
    - Специалист службы качества / аудит
    x-enum-varnames:
    - Engineer
    - QualityAuditor
  domain.ScanType:
    enum:
    - checkin
    - checkout
    type: string
    x-enum-comments:
      Checkin: сдача инструментов
      Checkout: выдача инструментов
    x-enum-descriptions:
    - сдача инструментов
    - выдача инструментов
    x-enum-varnames:
    - Checkin
    - Checkout
  domain.Status:
    enum:
    - OPEN
    - CLOSED
    - QA VERIFICATION
    type: string
    x-enum-varnames:
    - OPEN
    - CLOSED
    - QA
  domain.Transaction:
    properties:
      countOfChecks:
        format: int64
        type: integer
      createdAt:
        type: string
      cvScans:
        items:
          $ref: '#/definitions/domain.CvScan'
        type: array
      id:
        format: int64
        type: integer
      status:
        $ref: '#/definitions/domain.Status'
      toolSetId:
        format: int64
        type: integer
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/domain.User'
      userId:
        description: Received в UI, у кого инструмент
        format: int64
        type: integer
    type: object
  domain.User:
    properties:
      employeeId:
        type: string
      fullName:
        type: string
      id:
        format: int64
        type: integer
      role:
        $ref: '#/definitions/domain.Role'
      transactions:
        items:
          $ref: '#/definitions/domain.Transaction'
        type: array
    type: object
  v1.CheckReq:
    properties:
      data:
        type: string
      employee_id:
        type: string
      tool_set_id:
        type: integer
    required:
    - data
    - employee_id
    type: object
  v1.CheckRes:
    properties:
      access_tools:
        items:
          $ref: '#/definitions/v1.RecognizedToolDTO'
        type: array
      debug_image_url:
        type: string
      image_url:
        type: string
      manual_check_tools:
        items:
          $ref: '#/definitions/v1.RecognizedToolDTO'
        type: array
      missing_tools:
        items:
          $ref: '#/definitions/v1.ToolTypeDTO'
        type: array
      unknown_tools:
        items:
          $ref: '#/definitions/v1.RecognizedToolDTO'
        type: array
    type: object
  v1.GetRolesRes:
    properties:
      roles:
        items:
          type: string
        type: array
    type: object
  v1.HTTPError:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  v1.ListTransactionsRes:
    properties:
      transactions:
        items:
          $ref: '#/definitions/domain.Transaction'
        type: array
    type: object
  v1.LoginReq:
    properties:
      employee_id:
        type: string
    required:
    - employee_id
    type: object
  v1.LoginRes:
    properties:
      role:
        type: string
    type: object
  v1.RecognizedToolDTO:
    properties:
      confidence:
        type: number
      tool_type_id:
        type: integer
    type: object
  v1.RegisterReq:
    properties:
      employee_id:
        type: string
      full_name:
        type: string
      role:
        type: string
    required:
    - employee_id
    - full_name
    - role
    type: object
  v1.RegisterRes:
    properties:
      id:
        type: string
    type: object
  v1.ToolTypeDTO:
    properties:
      id:
        type: integer
      name:
        type: string
      part_number:
        type: string
    type: object
  v1.VerificationReq:
    properties:
      notes:
        type: string
      qa_employee_id:
        type: string
      transaction_id:
        type: integer
    required:
    - qa_employee_id
    - transaction_id
    type: object
  v1.VerificationRes:
    properties:
      message:
        description: Краткое текстовое подтверждение
        type: string
      status:
        description: Новый статус
        type: string
      transaction_id:
        description: ID транзакции, которую QA завершил
        type: string
      verified_at:
        description: Время завершения проверки
        type: string
      verified_by:
        description: Табельный номер или имя QA
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for managing airport tools
  termsOfService: http://swagger.io/terms/
  title: Airport Tools Vision API
  version: "1.0"
paths:
  /api/v1/transaction/{transaction_id}/verification:
    post:
      consumes:
      - application/json
      description: После авторизации сотрудника QA отображается список всех незавершённых
        транзакций.<br> При выборе конкретной транзакции открывается экран сверки:<br><br>
        • Фотография инструментов (полноразмерное изображение)<br> • Список проблемных
        инструментов с пояснениями, сгруппированных по категориям:<br> &nbsp;&nbsp;1)
        AccessTools — инструменты, прошедшие автоматическую проверку<br> &nbsp;&nbsp;2)
        ManualCheckTools — инструменты, требующие ручной проверки<br> &nbsp;&nbsp;3)
        UnknownTools — инструменты, не входящие в ожидаемый набор<br> &nbsp;&nbsp;4)
        MissingTools — инструменты, отсутствующие на фото, но ожидаемые<br><br>
      parameters:
      - description: Идентификатор транзакции
        in: path
        name: transaction_id
        required: true
        type: string
      - description: Данные завершения QA-проверки
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.VerificationReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.VerificationRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.HTTPError'
      summary: QA-проверка и завершение транзакции
      tags:
      - transactions
  /api/v1/transaction/check:
    post:
      consumes:
      - application/json
      description: 'Принимает табельный номер инженера и фотографию инструментов в
        формате base64.<br> Сервис анализирует изображение, сопоставляет инструменты
        с ожидаемым набором и возвращает: <br><br>• URL обработанного изображения
        <br>• четыре массива: <br>1) AccessTools — инструменты, прошедшие автоматическую
        проверку <br>2) ManualCheckTools — инструменты, требующие ручной проверки
        <br>3) UnknownTools — инструменты, отсутствующие в ожидаемом наборе <br>4)
        MissingTools — инструменты, отсутствующие на фотографии, но ожидаемые<br><br>
        Если не все инструменты попали в AccessTools, устанавливается флаг "ТРЕБУЕТСЯ
        РУЧНАЯ ПРОВЕРКА" (MANUAL VERIFICATION). <br><br>Эндпоинт используется как
        для выдачи инструментов инженеру, так и для их последующей сдачи.'
      parameters:
      - description: Запрос на выдачу или сдачу инструментов
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.CheckReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.CheckRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.HTTPError'
      summary: Операция выдачи/сдачи инструментов
      tags:
      - transactions
  /api/v1/transactions/:
    get:
      consumes:
      - application/json
      description: 'Возвращает список транзакций QA.<br> Можно фильтровать по статусу
        с помощью query-параметра `status`.<br> Например, `?status=manual_check_required`
        вернёт только транзакции, требующие ручной проверки.<br> Каждая транзакция
        содержит минимальные данные: ID, инженера, дату создания, текущий статус.'
      parameters:
      - description: Фильтр по статусу транзакции (например, manual_check_required)
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.ListTransactionsRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.HTTPError'
      summary: Список транзакций
      tags:
      - transactions
  /api/v1/user/login:
    post:
      consumes:
      - application/json
      description: Вход в систему по табельному номеру сотрудника.<br> После успешного
        входа пользователь перенаправляется:<br> • инженеру — на экран загрузки фотографии
        инструментов;<br> • QA — на экран проверки незавершённых транзакций.
      parameters:
      - description: Данные для входа
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.LoginRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.HTTPError'
      summary: Вход в систему
      tags:
      - user
  /api/v1/user/register:
    post:
      consumes:
      - application/json
      description: 'Регистрация сотрудника в системе.<br> Необходимые данные: табельный
        номер, ФИО и роль (например, "Инженер" или "QA").<br>'
      parameters:
      - description: Данные для регистрации
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.RegisterReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v1.RegisterRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/v1.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.HTTPError'
      summary: Регистрация сотрудника в системе
      tags:
      - user
  /api/v1/user/roles:
    get:
      consumes:
      - application/json
      description: Возвращает список всех возможных ролей пользователей в системе.
      produces:
      - application/json
      responses:
        "200":
          description: Список ролей
          schema:
            items:
              $ref: '#/definitions/v1.GetRolesRes'
            type: array
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/v1.HTTPError'
      summary: Получить список ролей
      tags:
      - user
swagger: "2.0"
